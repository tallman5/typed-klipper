import * as Models from '../../models';

export const jsonToComponentMapper: { pattern: RegExp, handler: (configKey: string, config: any) => Models.IConfigurableComponent }[] = [
    { pattern: /^ad5206/, handler: (configKey, json) => Models.Ad5206.fromJson(configKey, json) },
    { pattern: /^adc_scaled/, handler: (configKey, json) => Models.AdcScaled.fromJson(configKey, json) },
    { pattern: /^adc_temperature/, handler: (configKey, json) => Models.AdcTemperature.fromJson(configKey, json) },
    { pattern: /^adxl345/, handler: (configKey, json) => Models.Adxl345.fromJson(configKey, json) },
    { pattern: /^angle/, handler: (configKey, json) => Models.Angle.fromJson(configKey, json) },
    { pattern: /^axis_twist_compensation/, handler: (configKey, json) => Models.AxisTwistCompensation.fromJson(configKey, json) },
    { pattern: /^bed_mesh/, handler: (configKey, json) => Models.BedMesh.fromJson(configKey, json) },
    { pattern: /^bed_screws/, handler: (configKey, json) => Models.BedScrews.fromJson(configKey, json) },
    { pattern: /^bed_tilt/, handler: (configKey, json) => Models.BedTilt.fromJson(configKey, json) },
    { pattern: /^bltouch/, handler: (configKey, json) => Models.Bltouch.fromJson(configKey, json) },
    { pattern: /^board_pins/, handler: (configKey, json) => Models.BoardPins.fromJson(configKey, json) },
    { pattern: /^controller_fan/, handler: (configKey, json) => Models.ControllerFan.fromJson(configKey, json) },
    { pattern: /^delayed_gcode/, handler: (configKey, json) => Models.DelayedGcode.fromJson(configKey, json) },
    { pattern: /^display/, handler: (configKey, json) => Models.Display.fromJson(configKey, json) },
    { pattern: /^display_data/, handler: (configKey, json) => Models.DisplayData.fromJson(configKey, json) },
    { pattern: /^display_glyph/, handler: (configKey, json) => Models.DisplayGlyph.fromJson(configKey, json) },
    { pattern: /^display_template/, handler: (configKey, json) => Models.DisplayTemplate.fromJson(configKey, json) },
    { pattern: /^dotstar/, handler: (configKey, json) => Models.Dotstar.fromJson(configKey, json) },
    { pattern: /^dual_carriage/, handler: (configKey, json) => Models.DualCarriage.fromJson(configKey, json) },
    { pattern: /^duplicate_pin_override/, handler: (configKey, json) => Models.DuplicatePinOverride.fromJson(configKey, json) },
    { pattern: /^endstop_phase/, handler: (configKey, json) => Models.EndstopPhase.fromJson(configKey, json) },
    { pattern: /^exclude_object/, handler: (configKey, json) => Models.ExcludeObject.fromJson(configKey, json) },
    { pattern: /^extruder/, handler: (configKey, json) => Models.Extruder.fromJson(configKey, json) },
    { pattern: /^extruder_stepper/, handler: (configKey, json) => Models.ExtruderStepper.fromJson(configKey, json) },
    { pattern: /^fan/, handler: (configKey, json) => Models.Fan.fromJson(configKey, json) },
    { pattern: /^fan_generic/, handler: (configKey, json) => Models.FanGeneric.fromJson(configKey, json) },
    { pattern: /^filament_motion_sensor/, handler: (configKey, json) => Models.FilamentMotionSensor.fromJson(configKey, json) },
    { pattern: /^filament_switch_sensor/, handler: (configKey, json) => Models.FilamentSwitchSensor.fromJson(configKey, json) },
    { pattern: /^firmware_retraction/, handler: (configKey, json) => Models.FirmwareRetraction.fromJson(configKey, json) },
    { pattern: /^force_move/, handler: (configKey, json) => Models.ForceMove.fromJson(configKey, json) },
    { pattern: /^gcode_arcs/, handler: (configKey, json) => Models.GcodeArcs.fromJson(configKey, json) },
    { pattern: /^gcode_button/, handler: (configKey, json) => Models.GcodeButton.fromJson(configKey, json) },
    { pattern: /^gcode_macro/, handler: (configKey, json) => Models.GcodeMacro.fromJson(configKey, json) },
    { pattern: /^hall_filament_width_sensor/, handler: (configKey, json) => Models.HallFilamentWidthSensor.fromJson(configKey, json) },
    { pattern: /^heater_bed/, handler: (configKey, json) => Models.HeaterBed.fromJson(configKey, json) },
    { pattern: /^heater_fan/, handler: (configKey, json) => Models.HeaterFan.fromJson(configKey, json) },
    { pattern: /^heater_generic/, handler: (configKey, json) => Models.HeaterGeneric.fromJson(configKey, json) },
    { pattern: /^homing_heaters/, handler: (configKey, json) => Models.HomingHeaters.fromJson(configKey, json) },
    { pattern: /^homing_override/, handler: (configKey, json) => Models.HomingOverride.fromJson(configKey, json) },
    { pattern: /^idle_timeout/, handler: (configKey, json) => Models.IdleTimeout.fromJson(configKey, json) },
    { pattern: /^include/, handler: (configKey, json) => Models.Include.fromJson(configKey, json) },
    { pattern: /^input_shaper/, handler: (configKey, json) => Models.InputShaper.fromJson(configKey, json) },
    { pattern: /^led/, handler: (configKey, json) => Models.Led.fromJson(configKey, json) },
    { pattern: /^lis2dw/, handler: (configKey, json) => Models.Lis2dw.fromJson(configKey, json) },
    { pattern: /^load_cell/, handler: (configKey, json) => Models.LoadCell.fromJson(configKey, json) },
    { pattern: /^manual_stepper/, handler: (configKey, json) => Models.ManualStepper.fromJson(configKey, json) },
    { pattern: /^mcp4018/, handler: (configKey, json) => Models.Mcp4018.fromJson(configKey, json) },
    { pattern: /^mcp4451/, handler: (configKey, json) => Models.Mcp4451.fromJson(configKey, json) },
    { pattern: /^mcp4728/, handler: (configKey, json) => Models.Mcp4728.fromJson(configKey, json) },
    { pattern: /^mcu/, handler: (configKey, json) => Models.Mcu.fromJson(configKey, json) },
    { pattern: /^mpu9250/, handler: (configKey, json) => Models.Mpu9250.fromJson(configKey, json) },
    { pattern: /^multi_pin/, handler: (configKey, json) => Models.MultiPin.fromJson(configKey, json) },
    { pattern: /^neopixel/, handler: (configKey, json) => Models.Neopixel.fromJson(configKey, json) },
    { pattern: /^output_pin/, handler: (configKey, json) => Models.OutputPin.fromJson(configKey, json) },
    { pattern: /^palette2/, handler: (configKey, json) => Models.Palette2.fromJson(configKey, json) },
    { pattern: /^pause_resume/, handler: (configKey, json) => Models.PauseResume.fromJson(configKey, json) },
    { pattern: /^pca9533/, handler: (configKey, json) => Models.Pca9533.fromJson(configKey, json) },
    { pattern: /^pca9632/, handler: (configKey, json) => Models.Pca9632.fromJson(configKey, json) },
    { pattern: /^printer/, handler: (configKey, json) => Models.Printer.fromJson(configKey, json) },
    { pattern: /^probe/, handler: (configKey, json) => Models.Probe.fromJson(configKey, json) },
    { pattern: /^probe_eddy_current/, handler: (configKey, json) => Models.ProbeEddyCurrent.fromJson(configKey, json) },
    { pattern: /^pwm_cycle_time/, handler: (configKey, json) => Models.PwmCycleTime.fromJson(configKey, json) },
    { pattern: /^pwm_tool/, handler: (configKey, json) => Models.PwmTool.fromJson(configKey, json) },
    { pattern: /^quad_gantry_level/, handler: (configKey, json) => Models.QuadGantryLevel.fromJson(configKey, json) },
    { pattern: /^replicape/, handler: (configKey, json) => Models.Replicape.fromJson(configKey, json) },
    { pattern: /^resonance_tester/, handler: (configKey, json) => Models.ResonanceTester.fromJson(configKey, json) },
    { pattern: /^respond/, handler: (configKey, json) => Models.Respond.fromJson(configKey, json) },
    { pattern: /^safe_z_home/, handler: (configKey, json) => Models.SafeZHome.fromJson(configKey, json) },
    { pattern: /^samd_sercom/, handler: (configKey, json) => Models.SamdSercom.fromJson(configKey, json) },
    { pattern: /^save_variables/, handler: (configKey, json) => Models.SaveVariables.fromJson(configKey, json) },
    { pattern: /^screws_tilt_adjust/, handler: (configKey, json) => Models.ScrewsTiltAdjust.fromJson(configKey, json) },
    { pattern: /^sdcard_loop/, handler: (configKey, json) => Models.SdcardLoop.fromJson(configKey, json) },
    { pattern: /^servo/, handler: (configKey, json) => Models.Servo.fromJson(configKey, json) },
    { pattern: /^skew_correction/, handler: (configKey, json) => Models.SkewCorrection.fromJson(configKey, json) },
    { pattern: /^smart_effector/, handler: (configKey, json) => Models.SmartEffector.fromJson(configKey, json) },
    { pattern: /^static_digital_output/, handler: (configKey, json) => Models.StaticDigitalOutput.fromJson(configKey, json) },
    { pattern: /^stepper/, handler: (configKey, json) => Models.Stepper.fromJson(configKey, json) },
    { pattern: /^sx1509/, handler: (configKey, json) => Models.Sx1509.fromJson(configKey, json) },
    { pattern: /^temperature_fan/, handler: (configKey, json) => Models.TemperatureFan.fromJson(configKey, json) },
    { pattern: /^temperature_probe/, handler: (configKey, json) => Models.TemperatureProbe.fromJson(configKey, json) },
    { pattern: /^temperature_sensor/, handler: (configKey, json) => Models.TemperatureSensor.fromJson(configKey, json) },
    { pattern: /^thermistor/, handler: (configKey, json) => Models.Thermistor.fromJson(configKey, json) },
    { pattern: /^tmc2130/, handler: (configKey, json) => Models.Tmc2130.fromJson(configKey, json) },
    { pattern: /^tmc2208/, handler: (configKey, json) => Models.Tmc2208.fromJson(configKey, json) },
    { pattern: /^tmc2209/, handler: (configKey, json) => Models.Tmc2209.fromJson(configKey, json) },
    { pattern: /^tmc2240/, handler: (configKey, json) => Models.Tmc2240.fromJson(configKey, json) },
    { pattern: /^tmc2660/, handler: (configKey, json) => Models.Tmc2660.fromJson(configKey, json) },
    { pattern: /^tmc5160/, handler: (configKey, json) => Models.Tmc5160.fromJson(configKey, json) },
    { pattern: /^tsl1401cl_filament_width_sensor/, handler: (configKey, json) => Models.Tsl1401clFilamentWidthSensor.fromJson(configKey, json) },
    { pattern: /^verify_heater/, handler: (configKey, json) => Models.VerifyHeater.fromJson(configKey, json) },
    { pattern: /^virtual_sdcard/, handler: (configKey, json) => Models.VirtualSdcard.fromJson(configKey, json) },
    { pattern: /^z_thermal_adjust/, handler: (configKey, json) => Models.ZThermalAdjust.fromJson(configKey, json) },
    { pattern: /^z_tilt/, handler: (configKey, json) => Models.ZTilt.fromJson(configKey, json) },
];