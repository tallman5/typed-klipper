import * as Models from '../models';
import { IConfigurableComponent } from './configurableComponent';

export const jsonToComponentMapper: { pattern: RegExp, handler: (configKey: string, config: any) => IConfigurableComponent }[] = [
    { pattern: /^mcu/, handler: (configKey, json) => Models.Mcu.fromJson(configKey, json) },
    { pattern: /^printer/, handler: (configKey, json) => Models.Printer.fromJson(configKey, json) },
    { pattern: /^stepperx/, handler: (configKey, json) => Models.StepperX.fromJson(configKey, json) },
    { pattern: /^extruder/, handler: (configKey, json) => Models.Extruder.fromJson(configKey, json) },
    { pattern: /^heaterbed/, handler: (configKey, json) => Models.HeaterBed.fromJson(configKey, json) },
    { pattern: /^bedmesh/, handler: (configKey, json) => Models.BedMesh.fromJson(configKey, json) },
    { pattern: /^bedtilt/, handler: (configKey, json) => Models.BedTilt.fromJson(configKey, json) },
    { pattern: /^bedscrews/, handler: (configKey, json) => Models.BedScrews.fromJson(configKey, json) },
    { pattern: /^screwstiltadjust/, handler: (configKey, json) => Models.ScrewsTiltAdjust.fromJson(configKey, json) },
    { pattern: /^ztilt/, handler: (configKey, json) => Models.ZTilt.fromJson(configKey, json) },
    { pattern: /^quadgantrylevel/, handler: (configKey, json) => Models.QuadGantryLevel.fromJson(configKey, json) },
    { pattern: /^skewcorrection/, handler: (configKey, json) => Models.SkewCorrection.fromJson(configKey, json) },
    { pattern: /^zthermaladjust/, handler: (configKey, json) => Models.ZThermalAdjust.fromJson(configKey, json) },
    { pattern: /^safezhome/, handler: (configKey, json) => Models.SafeZHome.fromJson(configKey, json) },
    { pattern: /^homingoverride/, handler: (configKey, json) => Models.HomingOverride.fromJson(configKey, json) },
    { pattern: /^endstopphase/, handler: (configKey, json) => Models.EndstopPhase.fromJson(configKey, json) },
    { pattern: /^gcodemacro/, handler: (configKey, json) => Models.GcodeMacro.fromJson(configKey, json) },
    { pattern: /^delayedgcode/, handler: (configKey, json) => Models.DelayedGcode.fromJson(configKey, json) },
    { pattern: /^savevariables/, handler: (configKey, json) => Models.SaveVariables.fromJson(configKey, json) },
    { pattern: /^idletimeout/, handler: (configKey, json) => Models.IdleTimeout.fromJson(configKey, json) },
    { pattern: /^virtualsdcard/, handler: (configKey, json) => Models.VirtualSdcard.fromJson(configKey, json) },
    { pattern: /^sdcardloop/, handler: (configKey, json) => Models.SdcardLoop.fromJson(configKey, json) },
    { pattern: /^forcemove/, handler: (configKey, json) => Models.ForceMove.fromJson(configKey, json) },
    { pattern: /^pauseresume/, handler: (configKey, json) => Models.PauseResume.fromJson(configKey, json) },
    { pattern: /^firmwareretraction/, handler: (configKey, json) => Models.FirmwareRetraction.fromJson(configKey, json) },
    { pattern: /^gcodearcs/, handler: (configKey, json) => Models.GcodeArcs.fromJson(configKey, json) },
    { pattern: /^respond/, handler: (configKey, json) => Models.Respond.fromJson(configKey, json) },
    { pattern: /^excludeobject/, handler: (configKey, json) => Models.ExcludeObject.fromJson(configKey, json) },
    { pattern: /^inputshaper/, handler: (configKey, json) => Models.InputShaper.fromJson(configKey, json) },
    { pattern: /^adxl345/, handler: (configKey, json) => Models.Adxl345.fromJson(configKey, json) },
    { pattern: /^lis2dw/, handler: (configKey, json) => Models.Lis2dw.fromJson(configKey, json) },
    { pattern: /^mpu9250/, handler: (configKey, json) => Models.Mpu9250.fromJson(configKey, json) },
    { pattern: /^resonancetester/, handler: (configKey, json) => Models.ResonanceTester.fromJson(configKey, json) },
    { pattern: /^board_pins/, handler: (configKey, json) => Models.BoardPins.fromJson(configKey, json) },
    { pattern: /^include/, handler: (configKey, json) => Models.Include.fromJson(configKey, json) },
    { pattern: /^duplicatepinoverride/, handler: (configKey, json) => Models.DuplicatePinOverride.fromJson(configKey, json) },
    { pattern: /^probe/, handler: (configKey, json) => Models.Probe.fromJson(configKey, json) },
    { pattern: /^bltouch/, handler: (configKey, json) => Models.Bltouch.fromJson(configKey, json) },
    { pattern: /^smarteffector/, handler: (configKey, json) => Models.SmartEffector.fromJson(configKey, json) },
    { pattern: /^probeeddycurrent/, handler: (configKey, json) => Models.ProbeEddyCurrent.fromJson(configKey, json) },
    { pattern: /^axistwistcompensation/, handler: (configKey, json) => Models.AxisTwistCompensation.fromJson(configKey, json) },
    { pattern: /^stepperz1/, handler: (configKey, json) => Models.StepperZ1.fromJson(configKey, json) },
    { pattern: /^extruder1/, handler: (configKey, json) => Models.Extruder1.fromJson(configKey, json) },
    { pattern: /^dualcarriage/, handler: (configKey, json) => Models.DualCarriage.fromJson(configKey, json) },
    { pattern: /^extruderstepper/, handler: (configKey, json) => Models.ExtruderStepper.fromJson(configKey, json) },
    { pattern: /^manualstepper/, handler: (configKey, json) => Models.ManualStepper.fromJson(configKey, json) },
    { pattern: /^verifyheater/, handler: (configKey, json) => Models.VerifyHeater.fromJson(configKey, json) },
    { pattern: /^homingheaters/, handler: (configKey, json) => Models.HomingHeaters.fromJson(configKey, json) },
    { pattern: /^thermistor/, handler: (configKey, json) => Models.Thermistor.fromJson(configKey, json) },
    { pattern: /^adctemperature/, handler: (configKey, json) => Models.AdcTemperature.fromJson(configKey, json) },
    { pattern: /^heatergeneric/, handler: (configKey, json) => Models.HeaterGeneric.fromJson(configKey, json) },
    { pattern: /^temperaturesensor/, handler: (configKey, json) => Models.TemperatureSensor.fromJson(configKey, json) },
    { pattern: /^temperatureprobe/, handler: (configKey, json) => Models.TemperatureProbe.fromJson(configKey, json) },
    { pattern: /^fan/, handler: (configKey, json) => Models.Fan.fromJson(configKey, json) },
    { pattern: /^heaterfan/, handler: (configKey, json) => Models.HeaterFan.fromJson(configKey, json) },
    { pattern: /^controllerfan/, handler: (configKey, json) => Models.ControllerFan.fromJson(configKey, json) },
    { pattern: /^temperaturefan/, handler: (configKey, json) => Models.TemperatureFan.fromJson(configKey, json) },
    { pattern: /^fangeneric/, handler: (configKey, json) => Models.FanGeneric.fromJson(configKey, json) },
    { pattern: /^led/, handler: (configKey, json) => Models.Led.fromJson(configKey, json) },
    { pattern: /^neopixel/, handler: (configKey, json) => Models.Neopixel.fromJson(configKey, json) },
    { pattern: /^dotstar/, handler: (configKey, json) => Models.Dotstar.fromJson(configKey, json) },
    { pattern: /^pca9533/, handler: (configKey, json) => Models.Pca9533.fromJson(configKey, json) },
    { pattern: /^pca9632/, handler: (configKey, json) => Models.Pca9632.fromJson(configKey, json) },
    { pattern: /^servo/, handler: (configKey, json) => Models.Servo.fromJson(configKey, json) },
    { pattern: /^gcodebutton/, handler: (configKey, json) => Models.GcodeButton.fromJson(configKey, json) },
    { pattern: /^outputpin/, handler: (configKey, json) => Models.OutputPin.fromJson(configKey, json) },
    { pattern: /^pwmtool/, handler: (configKey, json) => Models.PwmTool.fromJson(configKey, json) },
    { pattern: /^pwmcycletime/, handler: (configKey, json) => Models.PwmCycleTime.fromJson(configKey, json) },
    { pattern: /^staticdigitaloutput/, handler: (configKey, json) => Models.StaticDigitalOutput.fromJson(configKey, json) },
    { pattern: /^multipin/, handler: (configKey, json) => Models.MultiPin.fromJson(configKey, json) },
    { pattern: /^tmc2130/, handler: (configKey, json) => Models.Tmc2130.fromJson(configKey, json) },
    { pattern: /^tmc2208/, handler: (configKey, json) => Models.Tmc2208.fromJson(configKey, json) },
    { pattern: /^tmc2209/, handler: (configKey, json) => Models.Tmc2209.fromJson(configKey, json) },
    { pattern: /^tmc2660/, handler: (configKey, json) => Models.Tmc2660.fromJson(configKey, json) },
    { pattern: /^tmc2240/, handler: (configKey, json) => Models.Tmc2240.fromJson(configKey, json) },
    { pattern: /^tmc5160/, handler: (configKey, json) => Models.Tmc5160.fromJson(configKey, json) },
    { pattern: /^ad5206/, handler: (configKey, json) => Models.Ad5206.fromJson(configKey, json) },
    { pattern: /^mcp4451/, handler: (configKey, json) => Models.Mcp4451.fromJson(configKey, json) },
    { pattern: /^mcp4728/, handler: (configKey, json) => Models.Mcp4728.fromJson(configKey, json) },
    { pattern: /^mcp4018/, handler: (configKey, json) => Models.Mcp4018.fromJson(configKey, json) },
    { pattern: /^display/, handler: (configKey, json) => Models.Display.fromJson(configKey, json) },
    { pattern: /^displaydata/, handler: (configKey, json) => Models.DisplayData.fromJson(configKey, json) },
    { pattern: /^displaytemplate/, handler: (configKey, json) => Models.DisplayTemplate.fromJson(configKey, json) },
    { pattern: /^displayglyph/, handler: (configKey, json) => Models.DisplayGlyph.fromJson(configKey, json) },
    { pattern: /^filamentswitchsensor/, handler: (configKey, json) => Models.FilamentSwitchSensor.fromJson(configKey, json) },
    { pattern: /^filamentmotionsensor/, handler: (configKey, json) => Models.FilamentMotionSensor.fromJson(configKey, json) },
    { pattern: /^tsl1401clfilamentwidthsensor/, handler: (configKey, json) => Models.Tsl1401clFilamentWidthSensor.fromJson(configKey, json) },
    { pattern: /^hallfilamentwidthsensor/, handler: (configKey, json) => Models.HallFilamentWidthSensor.fromJson(configKey, json) },
    { pattern: /^loadcell/, handler: (configKey, json) => Models.LoadCell.fromJson(configKey, json) },
    { pattern: /^sx1509/, handler: (configKey, json) => Models.Sx1509.fromJson(configKey, json) },
    { pattern: /^samdsercom/, handler: (configKey, json) => Models.SamdSercom.fromJson(configKey, json) },
    { pattern: /^adcscaled/, handler: (configKey, json) => Models.AdcScaled.fromJson(configKey, json) },
    { pattern: /^replicape/, handler: (configKey, json) => Models.Replicape.fromJson(configKey, json) },
    { pattern: /^palette2/, handler: (configKey, json) => Models.Palette2.fromJson(configKey, json) },
    { pattern: /^angle/, handler: (configKey, json) => Models.Angle.fromJson(configKey, json) },
];